// Copyright 2015 Amazon.com, Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/aws/amazon-ecs-agent/agent/tcs (interfaces: WebsocketClient)

package mock_tcs

import (
	net "net"
	url "net/url"
	http "net/http"
	websocket "github.com/gorilla/websocket"
	gomock "code.google.com/p/gomock/gomock"
)

// Mock of WebsocketClient interface
type MockWebsocketClient struct {
	ctrl     *gomock.Controller
	recorder *_MockWebsocketClientRecorder
}

// Recorder for MockWebsocketClient (not exported)
type _MockWebsocketClientRecorder struct {
	mock *MockWebsocketClient
}

func NewMockWebsocketClient(ctrl *gomock.Controller) *MockWebsocketClient {
	mock := &MockWebsocketClient{ctrl: ctrl}
	mock.recorder = &_MockWebsocketClientRecorder{mock}
	return mock
}

func (_m *MockWebsocketClient) EXPECT() *_MockWebsocketClientRecorder {
	return _m.recorder
}

func (_m *MockWebsocketClient) NewClient(_param0 net.Conn, _param1 *url.URL, _param2 http.Header, _param3 int, _param4 int) (*websocket.Conn, *http.Response, error) {
	ret := _m.ctrl.Call(_m, "NewClient", _param0, _param1, _param2, _param3, _param4)
	ret0, _ := ret[0].(*websocket.Conn)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockWebsocketClientRecorder) NewClient(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "NewClient", arg0, arg1, arg2, arg3, arg4)
}
