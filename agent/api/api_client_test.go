package api

import (
	"strings"
	"testing"

	"github.com/aws/amazon-ecs-agent/agent/auth"
	"github.com/aws/amazon-ecs-agent/agent/config"
	svc "github.com/aws/amazon-ecs-agent/agent/ecs_client/ecs_autogenerated_client"
)

const configuredCluster = "mycluster"

type mockResponse struct {
	err  error
	resp interface{}
}
type mockAmazonEC2ContainerServiceV20141113Client struct {
	svc.AmazonEC2ContainerServiceV20141113Client

	requests  []interface{}
	responses map[string][]mockResponse
}

func (mock *mockAmazonEC2ContainerServiceV20141113Client) addResponse(api string, value interface{}, err error) {
	resps, ok := mock.responses[api]
	if ok {
		mock.responses[api] = append(resps, mockResponse{err: err, resp: value})
	} else {
		mock.responses[api] = []mockResponse{mockResponse{err: err, resp: value}}
	}
}

func (mock *mockAmazonEC2ContainerServiceV20141113Client) getResponse(api string, defaultVal interface{}, defaultErr error) (interface{}, error) {
	resps, ok := mock.responses[api]
	if ok && len(resps) > 0 {
		resp := resps[0]
		mock.responses[api] = resps[1:]
		return resp.resp, resp.err
	}
	return defaultVal, defaultErr
}

func (mock *mockAmazonEC2ContainerServiceV20141113Client) lastRequest() interface{} {
	return mock.requests[len(mock.requests)-1]
}

func (mock *mockAmazonEC2ContainerServiceV20141113Client) addRequest(req interface{}) {
	mock.requests = append(mock.requests, req)
}

func (mock *mockAmazonEC2ContainerServiceV20141113Client) SubmitContainerStateChange(req svc.SubmitContainerStateChangeRequest) (svc.SubmitContainerStateChangeResponse, error) {
	mock.addRequest(req)
	resp, err := mock.getResponse("SubmitContainerStateChange", svc.NewSubmitContainerStateChangeResponse(), nil)
	return resp.(svc.SubmitContainerStateChangeResponse), err
}

func NewMockClient() (ECSClient, *mockAmazonEC2ContainerServiceV20141113Client) {
	client := NewECSClient(auth.TestCredentialProvider{}, &config.Config{Cluster: configuredCluster}, false)
	mockSvcClient := &mockAmazonEC2ContainerServiceV20141113Client{}
	mockSvcClient.requests = []interface{}{}
	mockSvcClient.responses = make(map[string][]mockResponse)
	client.(*ApiECSClient).serviceClientFn = func() (svc.AmazonEC2ContainerServiceV20141113, error) {
		return mockSvcClient, nil
	}
	return client, mockSvcClient
}

func TestSubmitContainerStateChange(t *testing.T) {
	client, mockSvcClient := NewMockClient()
	err := client.SubmitContainerStateChange(ContainerStateChange{
		TaskArn:       "arn",
		ContainerName: "cont",
		Status:        ContainerRunning,
	})
	if err != nil {
		t.Error("Unable to submit trivial container state change: %v", err)
	}
	req := mockSvcClient.lastRequest().(svc.SubmitContainerStateChangeRequest)
	if req == nil {
		t.Error("Expected request to be present")
	}
	if *req.Cluster() != configuredCluster {
		t.Error("Submitted wrong cluster")
	}
	if *req.Task() != "arn" {
		t.Error("Submitted wrong arn")
	}
	if *req.ContainerName() != "cont" {
		t.Error("Submitted wrong container name")
	}
	if *req.Status() != "RUNNING" {
		t.Error("Submitted wrong status")
	}
}

func TestSubmitContainerStateChange2(t *testing.T) {
	client, mockSvcClient := NewMockClient()
	exitCode := 20
	err := client.SubmitContainerStateChange(ContainerStateChange{
		TaskArn:       "arn",
		ContainerName: "cont",
		Status:        ContainerStopped,
		ExitCode:      &exitCode,
		Reason:        "I exited",
	})
	if err != nil {
		t.Error("Unable to submit container state change: %v", err)
	}
	req := mockSvcClient.lastRequest().(svc.SubmitContainerStateChangeRequest)
	if req == nil {
		t.Error("Expected request to be present")
	}
	if *req.Reason() != "I exited" {
		t.Error("Submitted wrong reason")
	}
	if *req.ExitCode() != 20 {
		t.Error("Submitted wrong exit code")
	}
}

func TestSubmitContainerStateChangeReason(t *testing.T) {
	client, mockSvcClient := NewMockClient()

	err := client.SubmitContainerStateChange(ContainerStateChange{
		TaskArn:       "arn",
		ContainerName: "cont",
		Status:        ContainerStopped,
		Reason:        strings.Repeat("a", EcsMaxReasonLength),
	})
	if err != nil {
		t.Error("Unable to submit container state change: %v", err)
	}
	req := mockSvcClient.lastRequest().(svc.SubmitContainerStateChangeRequest)
	if *req.Reason() != strings.Repeat("a", EcsMaxReasonLength) {
		t.Error("Submitted wrong reason")
	}
}

func TestSubmitContainerStateChangeLongReason(t *testing.T) {
	client, mockSvcClient := NewMockClient()
	// Test reason gets trimmed
	err := client.SubmitContainerStateChange(ContainerStateChange{
		TaskArn:       "arn",
		ContainerName: "cont",
		Status:        ContainerStopped,
		Reason:        strings.Repeat("a", EcsMaxReasonLength+1),
	})
	if err != nil {
		t.Error("Unable to submit container state change: %v", err)
	}
	req := mockSvcClient.lastRequest().(svc.SubmitContainerStateChangeRequest)
	if *req.Reason() != strings.Repeat("a", EcsMaxReasonLength) {
		t.Error("Submitted wrong reason")
	}
}

func (mock *mockAmazonEC2ContainerServiceV20141113Client) RegisterContainerInstance(req svc.RegisterContainerInstanceRequest) (svc.RegisterContainerInstanceResponse, error) {
	mock.addRequest(req)
	defaultResponse := svc.NewRegisterContainerInstanceResponse()
	contInstance := svc.NewContainerInstance()
	arn := "mockContainerInstanceArn"
	contInstance.SetContainerInstanceArn(&arn)
	defaultResponse.SetContainerInstance(contInstance)
	resp, err := mock.getResponse("RegisterContainerInstance", defaultResponse, nil)
	return resp.(svc.RegisterContainerInstanceResponse), err
}

func TestRegisterContainerInstance(t *testing.T) {
	client, mockSvcClient := NewMockClient()
	_, err := client.RegisterContainerInstance()
	if err != nil {
		t.Error("Unexpected register error")
	}
	if len(mockSvcClient.requests) != 1 {
		t.Error("Expected only one request to be made")
	}
	req := mockSvcClient.lastRequest().(svc.RegisterContainerInstanceRequest)
	if *req.Cluster() != configuredCluster {
		t.Error("Register request was for wrong cluster")
	}
	// TODO, test instance identity document and resources
}

func (mock *mockAmazonEC2ContainerServiceV20141113Client) CreateCluster(req svc.CreateClusterRequest) (svc.CreateClusterResponse, error) {
	mock.addRequest(req)
	defaultCreateClusterResponse := svc.NewCreateClusterResponse()
	defaultCluster := svc.NewCluster()
	clusterName := config.DEFAULT_CLUSTER_NAME
	defaultCluster.SetClusterName(&clusterName)
	defaultCreateClusterResponse.SetCluster(defaultCluster)
	resp, err := mock.getResponse("CreateCluster", defaultCreateClusterResponse, nil)
	return resp.(svc.CreateClusterResponse), err
}

func TestRegisterContainerInstanceBlankCluster(t *testing.T) {
	client, mockSvcClient := NewMockClient()
	client.(*ApiECSClient).config.Cluster = ""
	_, err := client.RegisterContainerInstance()
	if err != nil {
		t.Error("Unexpected register error")
	}
	if len(mockSvcClient.requests) != 1 {
		t.Fatal("Expected one request to be made")
	}
	req := mockSvcClient.lastRequest().(svc.RegisterContainerInstanceRequest)
	if *req.Cluster() != config.DEFAULT_CLUSTER_NAME {
		t.Error("Register request was for wrong cluster")
	}
}

func TestRegisterUnregisteredBlankCluster(t *testing.T) {
	client, mockSvcClient := NewMockClient()
	client.(*ApiECSClient).config.Cluster = ""

	mockSvcClient.addResponse("RegisterContainerInstance", svc.NewRegisterContainerInstanceResponse(), svc.NewClientException())

	_, err := client.RegisterContainerInstance()
	if err != nil {
		t.Error("Unexpected register error")
	}
	// register fail, create succeed, register succeed
	if len(mockSvcClient.requests) != 3 {
		t.Fatal("Expected three request to be made")
	}
	req := mockSvcClient.lastRequest().(svc.RegisterContainerInstanceRequest)
	if *req.Cluster() != config.DEFAULT_CLUSTER_NAME {
		t.Error("Register request was for wrong cluster")
	}
	req2 := mockSvcClient.requests[1].(svc.CreateClusterRequest)
	if *req2.ClusterName() != config.DEFAULT_CLUSTER_NAME {
		t.Error("CreateCluster should have been called with the default cluster")
	}
}
