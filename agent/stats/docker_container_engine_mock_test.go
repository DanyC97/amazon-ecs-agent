// Copyright 2014-2015 Amazon.com, Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
// http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.
//
// Source: docker_container_engine.go in package engine
// Automatically generated by MockGen. This file has also been edited since
// it was generated as it has been moved to the 'stats' package.

package stats

import (
	gomock "code.google.com/p/gomock/gomock"
	api "github.com/aws/amazon-ecs-agent/agent/api"
	"github.com/aws/amazon-ecs-agent/agent/engine"
	go_dockerclient "github.com/fsouza/go-dockerclient"
)

// Mock of DockerClient interface
type MockDockerClient struct {
	ctrl     *gomock.Controller
	recorder *_MockDockerClientRecorder
}

// Recorder for MockDockerClient (not exported)
type _MockDockerClientRecorder struct {
	mock *MockDockerClient
}

func NewMockDockerClient(ctrl *gomock.Controller) *MockDockerClient {
	mock := &MockDockerClient{ctrl: ctrl}
	mock.recorder = &_MockDockerClientRecorder{mock}
	return mock
}

func (_m *MockDockerClient) EXPECT() *_MockDockerClientRecorder {
	return _m.recorder
}

func (_m *MockDockerClient) ContainerEvents() (<-chan engine.DockerContainerChangeEvent, chan *go_dockerclient.APIEvents, error) {
	ret := _m.ctrl.Call(_m, "ContainerEvents")
	ret0, _ := ret[0].(<-chan engine.DockerContainerChangeEvent)
	ret1, _ := ret[1].(chan *go_dockerclient.APIEvents)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockDockerClientRecorder) ContainerEvents() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ContainerEvents")
}

func (_m *MockDockerClient) UnsubscribeContainerEvents(_param0 chan *go_dockerclient.APIEvents) error {
	ret := _m.ctrl.Call(_m, "UnsubscribeContainerEvents", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockDockerClientRecorder) UnsubscribeContainerEvents(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UnsubscribeContainerEvents", arg0)
}

func (_m *MockDockerClient) PullImage(image string) error {
	ret := _m.ctrl.Call(_m, "PullImage", image)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockDockerClientRecorder) PullImage(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PullImage", arg0)
}

func (_m *MockDockerClient) CreateContainer(_param0 *go_dockerclient.Config, _param1 string) (string, error) {
	ret := _m.ctrl.Call(_m, "CreateContainer", _param0, _param1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockDockerClientRecorder) CreateContainer(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateContainer", arg0, arg1)
}

func (_m *MockDockerClient) StartContainer(_param0 string, _param1 *go_dockerclient.HostConfig) error {
	ret := _m.ctrl.Call(_m, "StartContainer", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockDockerClientRecorder) StartContainer(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "StartContainer", arg0, arg1)
}

func (_m *MockDockerClient) StopContainer(_param0 string) error {
	ret := _m.ctrl.Call(_m, "StopContainer", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockDockerClientRecorder) StopContainer(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "StopContainer", arg0)
}

func (_m *MockDockerClient) RemoveContainer(_param0 string) error {
	ret := _m.ctrl.Call(_m, "RemoveContainer", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockDockerClientRecorder) RemoveContainer(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RemoveContainer", arg0)
}

func (_m *MockDockerClient) GetContainerName(_param0 string) (string, error) {
	ret := _m.ctrl.Call(_m, "GetContainerName", _param0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockDockerClientRecorder) GetContainerName(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetContainerName", arg0)
}

func (_m *MockDockerClient) InspectContainer(_param0 string) (*go_dockerclient.Container, error) {
	ret := _m.ctrl.Call(_m, "InspectContainer", _param0)
	ret0, _ := ret[0].(*go_dockerclient.Container)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockDockerClientRecorder) InspectContainer(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "InspectContainer", arg0)
}

func (_m *MockDockerClient) DescribeContainer(_param0 string) (api.ContainerStatus, error) {
	ret := _m.ctrl.Call(_m, "DescribeContainer", _param0)
	ret0, _ := ret[0].(api.ContainerStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockDockerClientRecorder) DescribeContainer(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeContainer", arg0)
}

func (_m *MockDockerClient) ListContainers(_param0 bool) ([]string, error) {
	ret := _m.ctrl.Call(_m, "ListContainers", _param0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockDockerClientRecorder) ListContainers(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListContainers", arg0)
}

func (_m *MockDockerClient) Version() (string, error) {
	ret := _m.ctrl.Call(_m, "Version")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockDockerClientRecorder) Version() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Version")
}
