#!/bin/bash
# Copyright 2014-2015 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the
# "License"). You may not use this file except in compliance
#  with the License. A copy of the License is located at
#
#     http://aws.amazon.com/apache2.0/
#
# or in the "license" file accompanying this file. This file is
# distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
# CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and
# limitations under the License.

# This script is responsible for publishing new versions of the Amazon ECS Container Agent.
# Publishing involves several components:
# 1. Tag the image appropriately
# 2. Push the image to DockerHub
# 3. Push the image (and its md5sum) to S3 with -latest and -VERSION

set -e

DRYRUN=true
VERSION=$(cat VERSION)

IMAGE_NAME_OVERRIDE=""
IMAGE_TAG_LATEST="latest"
IMAGE_TAG_SHA=$(git rev-parse --short HEAD)
IMAGE_TAG_VERSION="v${VERSION}"

AWS_PROFILE=""
S3_BUCKET_OVERRIDE=""

usage() {
	echo "Usage: ${0}"
	echo "Options"
	echo "  -d  true|false  Dryrun (default is true)"
	echo "  -p  PROFILE     AWS CLI Profile (default is none)"
	echo "  -b  BUCKET      AWS S3 Bucket (default is amazon-ecs-agent)"
	echo "  -i  IMAGE       Docker image name (default is amazon/amazon-ecs-agent)"
	echo "  -h              Display this help message"
}

dryval() {
	if ${DRYRUN} ; then
		echo "DRYRUN: ${@}"
	else
		echo "RUNNING: ${@}"
		"${@}"
	fi
}

tag_and_push_docker() {
	image_name="amazon/amazon-ecs-agent"
	if [[ ! -z "${IMAGE_NAME_OVERRIDE}" ]]; then
		image_name="${IMAGE_NAME_OVERRIDE}"
	fi
	for tag in ${IMAGE_TAG_VERSION} ${IMAGE_TAG_SHA} ${IMAGE_TAG_LATEST}; do
		echo "Tagging as ${image_name}:${tag}"
		docker tag -f amazon/amazon-ecs-agent:latest "${image_name}:${tag}"
		dryval docker push "${image_name}:${tag}"
	done
}

save_and_publish_s3() {
	tarball="$(mktemp)"
	tarball_md5="$(mktemp)"

	dryval docker save "amazon/amazon-ecs-agent:latest" > "${tarball}"
	md5sum "${tarball}" | sed 's/ .*//' > "${tarball_md5}"
	echo "Saved with md5sum $(cat ${tarball_md5})"

	s3_bucket="amazon-ecs-agent"
	if [[ ! -z "${S3_BUCKET_OVERRIDE}" ]]; then
		s3_bucket="${S3_BUCKET_OVERRIDE}"
	fi
	profile=""
	if [[ ! -z "${AWS_PROFILE}" ]]; then
		profile="--profile ${AWS_PROFILE}"
	fi

	for tag in ${IMAGE_TAG_VERSION} ${IMAGE_TAG_SHA} ${IMAGE_TAG_LATEST}; do
		echo "Publishing as ecs-agent-${tag}"
		dryval aws ${profile} s3 cp ${tarball} s3://${s3_bucket}/ecs-agent-${tag}.tar --acl public-read
		dryval aws ${profile} s3 cp ${tarball_md5} s3://${s3_bucket}/ecs-agent-${tag}.tar.md5 --acl public-read
	done

	rm "${tarball}"
	rm "${tarball_md5}"
}

while getopts ":d:p:b:i:h" opt; do
	case ${opt} in
		d)
			if [[ "${OPTARG}" = "false" ]]; then
				DRYRUN=false
			fi
			;;
		p)
			AWS_PROFILE="${OPTARG}"
			;;
		b)
			S3_BUCKET_OVERRIDE="${OPTARG}"
			;;
		i)
			IMAGE_NAME_OVERRIDE="${OPTARG}"
			;;
		\?)
			echo "Invalid option -${OPTARG}" >&2
			usage
			exit 1
			;;
		:)
			echo "Option -${OPTARG} requires an argument." >&2
			usage
			exit 1
			;;
		h)
			usage
			exit 0
			;;
	esac
done

tag_and_push_docker
save_and_publish_s3